//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\acarter\\code\\antlr_sandbox\\T.g 2011-11-28 10:46:33

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class TLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__6=6;
	public const int T__7=7;
	public const int ID=4;
	public const int WS=5;

    // delegates
    // delegators

	public TLexer()
	{
		OnCreated();
	}

	public TLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public TLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\acarter\\code\\antlr_sandbox\\T.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__6();
	partial void LeaveRule_T__6();

	// $ANTLR start "T__6"
	[GrammarRule("T__6")]
	private void mT__6()
	{
		EnterRule_T__6();
		EnterRule("T__6", 1);
		TraceIn("T__6", 1);
		try
		{
			int _type = T__6;
			int _channel = DefaultTokenChannel;
			// D:\\acarter\\code\\antlr_sandbox\\T.g:7:6: ( ';' )
			DebugEnterAlt(1);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:7:8: ';'
			{
			DebugLocation(7, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__6", 1);
			LeaveRule("T__6", 1);
			LeaveRule_T__6();
		}
	}
	// $ANTLR end "T__6"

	partial void EnterRule_T__7();
	partial void LeaveRule_T__7();

	// $ANTLR start "T__7"
	[GrammarRule("T__7")]
	private void mT__7()
	{
		EnterRule_T__7();
		EnterRule("T__7", 2);
		TraceIn("T__7", 2);
		try
		{
			int _type = T__7;
			int _channel = DefaultTokenChannel;
			// D:\\acarter\\code\\antlr_sandbox\\T.g:8:6: ( 'call' )
			DebugEnterAlt(1);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:8:8: 'call'
			{
			DebugLocation(8, 8);
			Match("call"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__7", 2);
			LeaveRule("T__7", 2);
			LeaveRule_T__7();
		}
	}
	// $ANTLR end "T__7"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 3);
		TraceIn("ID", 3);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// D:\\acarter\\code\\antlr_sandbox\\T.g:7:4: ( ( 'a' .. 'z' )+ )
			DebugEnterAlt(1);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:7:7: ( 'a' .. 'z' )+
			{
			DebugLocation(7, 7);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:7:7: ( 'a' .. 'z' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\acarter\\code\\antlr_sandbox\\T.g:
					{
					DebugLocation(7, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 3);
			LeaveRule("ID", 3);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 4);
		TraceIn("WS", 4);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// D:\\acarter\\code\\antlr_sandbox\\T.g:8:4: ( ( ' ' | '\\n' | '\\r' )+ )
			DebugEnterAlt(1);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:8:7: ( ' ' | '\\n' | '\\r' )+
			{
			DebugLocation(8, 7);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:8:7: ( ' ' | '\\n' | '\\r' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0=='\n'||LA2_0=='\r'||LA2_0==' '))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\acarter\\code\\antlr_sandbox\\T.g:
					{
					DebugLocation(8, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(8, 24);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 4);
			LeaveRule("WS", 4);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// D:\\acarter\\code\\antlr_sandbox\\T.g:1:8: ( T__6 | T__7 | ID | WS )
		int alt3=4;
		try { DebugEnterDecision(3, false);
		switch (input.LA(1))
		{
		case ';':
			{
			alt3 = 1;
			}
			break;
		case 'c':
			{
			int LA3_2 = input.LA(2);

			if ((LA3_2=='a'))
			{
				int LA3_5 = input.LA(3);

				if ((LA3_5=='l'))
				{
					int LA3_6 = input.LA(4);

					if ((LA3_6=='l'))
					{
						int LA3_7 = input.LA(5);

						if (((LA3_7>='a' && LA3_7<='z')))
						{
							alt3 = 3;
						}
						else
						{
							alt3 = 2;
						}
					}
					else
					{
						alt3 = 3;
					}
				}
				else
				{
					alt3 = 3;
				}
			}
			else
			{
				alt3 = 3;
			}
			}
			break;
		case 'a':
		case 'b':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			{
			alt3 = 3;
			}
			break;
		case '\n':
		case '\r':
		case ' ':
			{
			alt3 = 4;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(3); }
		switch (alt3)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:1:10: T__6
			{
			DebugLocation(1, 10);
			mT__6(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:1:15: T__7
			{
			DebugLocation(1, 15);
			mT__7(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:1:20: ID
			{
			DebugLocation(1, 20);
			mID(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:1:23: WS
			{
			DebugLocation(1, 23);
			mWS(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
