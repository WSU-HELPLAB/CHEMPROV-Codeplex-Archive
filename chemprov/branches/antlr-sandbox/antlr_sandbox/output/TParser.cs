//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\acarter\\code\\antlr_sandbox\\T.g 2011-11-28 10:46:33

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class TParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ID", "WS", "';'", "'call'"
	};
	public const int EOF=-1;
	public const int T__6=6;
	public const int T__7=7;
	public const int ID=4;
	public const int WS=5;

	public TParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public TParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return TParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\acarter\\code\\antlr_sandbox\\T.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_r();
	partial void LeaveRule_r();

	// $ANTLR start "r"
	// D:\\acarter\\code\\antlr_sandbox\\T.g:6:1: r : 'call' ID ';' ;
	[GrammarRule("r")]
	private void r()
	{
		EnterRule_r();
		EnterRule("r", 1);
		TraceIn("r", 1);
		IToken ID1 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "r");
		DebugLocation(6, 59);
		try
		{
			// D:\\acarter\\code\\antlr_sandbox\\T.g:6:3: ( 'call' ID ';' )
			DebugEnterAlt(1);
			// D:\\acarter\\code\\antlr_sandbox\\T.g:6:6: 'call' ID ';'
			{
			DebugLocation(6, 6);
			Match(input,7,Follow._7_in_r20); 
			DebugLocation(6, 13);
			ID1=(IToken)Match(input,ID,Follow._ID_in_r22); 
			DebugLocation(6, 16);
			Match(input,6,Follow._6_in_r24); 
			DebugLocation(6, 20);
			System.out.println("invoke"+(ID1!=null?ID1.Text:null));

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("r", 1);
			LeaveRule("r", 1);
			LeaveRule_r();
		}
		DebugLocation(6, 59);
		} finally { DebugExitRule(GrammarFileName, "r"); }
		return;

	}
	// $ANTLR end "r"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _7_in_r20 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ID_in_r22 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _6_in_r24 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
